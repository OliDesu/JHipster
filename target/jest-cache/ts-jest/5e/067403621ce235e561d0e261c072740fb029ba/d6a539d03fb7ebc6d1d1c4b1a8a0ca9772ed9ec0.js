"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@angular/core");
const common_1 = require("@angular/common");
const router_1 = require("@angular/router");
const pagination_constants_1 = require("app/shared/constants/pagination.constants");
const audits_service_1 = require("./audits.service");
let AuditsComponent = class AuditsComponent {
    constructor(auditsService, activatedRoute, datePipe, router) {
        this.auditsService = auditsService;
        this.activatedRoute = activatedRoute;
        this.datePipe = datePipe;
        this.router = router;
        this.fromDate = '';
        this.itemsPerPage = pagination_constants_1.ITEMS_PER_PAGE;
        this.toDate = '';
        this.totalItems = 0;
        this.dateFormat = 'yyyy-MM-dd';
    }
    ngOnInit() {
        this.toDate = this.today();
        this.fromDate = this.previousMonth();
        this.activatedRoute.data.subscribe(data => {
            this.page = data['pagingParams'].page;
            this.previousPage = data['pagingParams'].page;
            this.ascending = data['pagingParams'].ascending;
            this.predicate = data['pagingParams'].predicate;
            this.loadData();
        });
    }
    loadPage(page) {
        if (page !== this.previousPage) {
            this.previousPage = page;
            this.transition();
        }
    }
    canLoad() {
        return this.fromDate !== '' && this.toDate !== '';
    }
    transition() {
        if (this.canLoad()) {
            this.router.navigate(['/admin/audits'], {
                queryParams: {
                    page: this.page,
                    sort: this.predicate + ',' + (this.ascending ? 'asc' : 'desc')
                }
            });
            this.loadData();
        }
    }
    previousMonth() {
        let date = new Date();
        if (date.getMonth() === 0) {
            date = new Date(date.getFullYear() - 1, 11, date.getDate());
        }
        else {
            date = new Date(date.getFullYear(), date.getMonth() - 1, date.getDate());
        }
        return this.datePipe.transform(date, this.dateFormat);
    }
    today() {
        // Today + 1 day - needed if the current day must be included
        const date = new Date();
        date.setDate(date.getDate() + 1);
        return this.datePipe.transform(date, this.dateFormat);
    }
    loadData() {
        this.auditsService
            .query({
            page: this.page - 1,
            size: this.itemsPerPage,
            sort: this.sort(),
            fromDate: this.fromDate,
            toDate: this.toDate
        })
            .subscribe((res) => this.onSuccess(res.body, res.headers));
    }
    sort() {
        const result = [this.predicate + ',' + (this.ascending ? 'asc' : 'desc')];
        if (this.predicate !== 'id') {
            result.push('id');
        }
        return result;
    }
    onSuccess(audits, headers) {
        this.totalItems = Number(headers.get('X-Total-Count'));
        this.audits = audits || [];
    }
};
AuditsComponent = tslib_1.__decorate([
    core_1.Component({
        selector: 'jhi-audit',
        template: require('./audits.component.html')
    }),
    tslib_1.__metadata("design:paramtypes", [audits_service_1.AuditsService,
        router_1.ActivatedRoute,
        common_1.DatePipe,
        router_1.Router])
], AuditsComponent);
exports.AuditsComponent = AuditsComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,