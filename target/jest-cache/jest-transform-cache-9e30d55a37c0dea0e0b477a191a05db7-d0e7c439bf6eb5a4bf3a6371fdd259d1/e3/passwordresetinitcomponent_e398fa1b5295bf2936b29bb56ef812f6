0c4c4d6b25d39ee6526ad72206d94203
"use strict";

/* istanbul ignore next */
var cov_1ub5r36ybq = function () {
  var path = "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts";
  var hash = "b070bf0b1cfb27f23beff1146271545adc128ef7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password-reset/init/password-reset-init.component.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "4": {
        start: {
          line: 6,
          column: 38
        },
        end: {
          line: 6,
          column: 78
        }
      },
      "5": {
        start: {
          line: 7,
          column: 33
        },
        end: {
          line: 24,
          column: 1
        }
      },
      "6": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 65
        }
      },
      "7": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 21
        }
      },
      "8": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "9": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 14,
          column: 11
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "11": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 45
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 126
        }
      },
      "13": {
        start: {
          line: 22,
          column: 104
        },
        end: {
          line: 22,
          column: 123
        }
      },
      "14": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "15": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 35,
          column: 31
        }
      },
      "16": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 64
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 22,
            column: 97
          },
          end: {
            line: 22,
            column: 98
          }
        },
        loc: {
          start: {
            line: 22,
            column: 104
          },
          end: {
            line: 22,
            column: 123
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }],
        line: 17
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "b070bf0b1cfb27f23beff1146271545adc128ef7"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_1ub5r36ybq.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const tslib_1 =
/* istanbul ignore next */
(cov_1ub5r36ybq.s[1]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_1ub5r36ybq.s[2]++, require("@angular/core"));
const forms_1 =
/* istanbul ignore next */
(cov_1ub5r36ybq.s[3]++, require("@angular/forms"));
const password_reset_init_service_1 =
/* istanbul ignore next */
(cov_1ub5r36ybq.s[4]++, require("./password-reset-init.service"));

/* istanbul ignore next */
cov_1ub5r36ybq.s[5]++;
let PasswordResetInitComponent = class PasswordResetInitComponent {
  constructor(passwordResetInitService, fb) {
    /* istanbul ignore next */
    cov_1ub5r36ybq.f[0]++;
    cov_1ub5r36ybq.s[6]++;
    this.passwordResetInitService = passwordResetInitService;

    /* istanbul ignore next */
    cov_1ub5r36ybq.s[7]++;
    this.fb = fb;

    /* istanbul ignore next */
    cov_1ub5r36ybq.s[8]++;
    this.success = false;

    /* istanbul ignore next */
    cov_1ub5r36ybq.s[9]++;
    this.resetRequestForm = this.fb.group({
      email: ['', [forms_1.Validators.required, forms_1.Validators.minLength(5), forms_1.Validators.maxLength(254), forms_1.Validators.email]]
    });
  }

  ngAfterViewInit() {
    /* istanbul ignore next */
    cov_1ub5r36ybq.f[1]++;
    cov_1ub5r36ybq.s[10]++;

    if (this.email) {
      /* istanbul ignore next */
      cov_1ub5r36ybq.b[0][0]++;
      cov_1ub5r36ybq.s[11]++;
      this.email.nativeElement.focus();
    } else
    /* istanbul ignore next */
    {
      cov_1ub5r36ybq.b[0][1]++;
    }
  }

  requestReset() {
    /* istanbul ignore next */
    cov_1ub5r36ybq.f[2]++;
    cov_1ub5r36ybq.s[12]++;
    this.passwordResetInitService.save(this.resetRequestForm.get(['email']).value).subscribe(() => {
      /* istanbul ignore next */
      cov_1ub5r36ybq.f[3]++;
      cov_1ub5r36ybq.s[13]++;
      return this.success = true;
    });
  }

};

/* istanbul ignore next */
cov_1ub5r36ybq.s[14]++;

tslib_1.__decorate([core_1.ViewChild('email', {
  static: false
}), tslib_1.__metadata("design:type", core_1.ElementRef)], PasswordResetInitComponent.prototype, "email", void 0);

/* istanbul ignore next */
cov_1ub5r36ybq.s[15]++;
PasswordResetInitComponent = tslib_1.__decorate([core_1.Component({
  selector: 'jhi-password-reset-init',
  template: require('./password-reset-init.component.html')
}), tslib_1.__metadata("design:paramtypes", [password_reset_init_service_1.PasswordResetInitService, forms_1.FormBuilder])], PasswordResetInitComponent);

/* istanbul ignore next */
cov_1ub5r36ybq.s[16]++;
exports.PasswordResetInitComponent = PasswordResetInitComponent;