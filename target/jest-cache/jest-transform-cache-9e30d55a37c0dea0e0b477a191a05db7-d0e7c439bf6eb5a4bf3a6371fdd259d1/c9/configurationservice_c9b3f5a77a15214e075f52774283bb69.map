{"file":"/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/configuration/configuration.service.ts","mappings":";;;AAAA,wCAA2C;AAC3C,+CAAkD;AAElD,8CAAqC;AAErC,qDAAmD;AA4CnD,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAC/B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,QAAQ;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAc,8BAAc,GAAG,wBAAwB,CAAC,CAAC,IAAI,CAC/E,eAAG,CAAC,WAAW,CAAC,EAAE,CAChB,MAAM,CAAC,MAAM,CACX,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;aAChC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;aAC7B,MAAM,CAAC,CAAC,QAAe,EAAE,YAAmB,EAAE,EAAE,CAAC,iCAAM,QAAQ,GAAK,YAAY,EAAG,CAAC,CACxF,CACF,CACF,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,8BAAc,GAAG,gBAAgB,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;IACrG,CAAC;CACF,CAAA;AAlBY,oBAAoB;IADhC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;6CAEP,iBAAU;GADzB,oBAAoB,CAkBhC;AAlBY,oDAAoB","names":[],"sources":["/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/configuration/configuration.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\nexport interface ConfigProps {\n  contexts: Contexts;\n}\n\nexport interface Contexts {\n  [key: string]: Context;\n}\n\nexport interface Context {\n  beans: Beans;\n  parentId?: any;\n}\n\nexport interface Beans {\n  [key: string]: Bean;\n}\n\nexport interface Bean {\n  prefix: string;\n  properties: any;\n}\n\nexport interface Env {\n  activeProfiles?: string[];\n  propertySources: PropertySource[];\n}\n\nexport interface PropertySource {\n  name: string;\n  properties: Properties;\n}\n\nexport interface Properties {\n  [key: string]: Property;\n}\n\nexport interface Property {\n  value: string;\n  origin?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigurationService {\n  constructor(private http: HttpClient) {}\n\n  getBeans(): Observable<Bean[]> {\n    return this.http.get<ConfigProps>(SERVER_API_URL + 'management/configprops').pipe(\n      map(configProps =>\n        Object.values(\n          Object.values(configProps.contexts)\n            .map(context => context.beans)\n            .reduce((allBeans: Beans, contextBeans: Beans) => ({ ...allBeans, ...contextBeans }))\n        )\n      )\n    );\n  }\n\n  getPropertySources(): Observable<PropertySource[]> {\n    return this.http.get<Env>(SERVER_API_URL + 'management/env').pipe(map(env => env.propertySources));\n  }\n}\n"],"version":3}