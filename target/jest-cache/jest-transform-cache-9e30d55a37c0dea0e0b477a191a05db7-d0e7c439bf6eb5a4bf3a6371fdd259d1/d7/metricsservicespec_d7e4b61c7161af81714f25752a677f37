9d7b6ae1020a96c5c3044e4ff0cde926
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const metrics_service_1 = require("app/admin/metrics/metrics.service");
const app_constants_1 = require("app/app.constants");
describe('Service Tests', () => {
    describe('Logs Service', () => {
        let service;
        let httpMock;
        beforeEach(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [testing_2.HttpClientTestingModule]
            });
            service = testing_1.TestBed.get(metrics_service_1.MetricsService);
            httpMock = testing_1.TestBed.get(testing_2.HttpTestingController);
        });
        afterEach(() => {
            httpMock.verify();
        });
        describe('Service methods', () => {
            it('should call correct URL', () => {
                service.getMetrics().subscribe();
                const req = httpMock.expectOne({ method: 'GET' });
                const resourceUrl = app_constants_1.SERVER_API_URL + 'management/jhimetrics';
                expect(req.request.url).toEqual(resourceUrl);
            });
            it('should return Metrics', () => {
                let expectedResult = null;
                const metrics = {
                    jvm: {},
                    'http.server.requests': {},
                    cache: {},
                    services: {},
                    databases: {},
                    garbageCollector: {},
                    processMetrics: {}
                };
                service.getMetrics().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(metrics);
                expect(expectedResult).toEqual(metrics);
            });
            it('should return Thread Dump', () => {
                let expectedResult = null;
                const dump = { threads: [{ name: 'test1', threadState: 'RUNNABLE' }] };
                service.threadDump().subscribe(received => {
                    expectedResult = received;
                });
                const req = httpMock.expectOne({ method: 'GET' });
                req.flush(dump);
                expect(expectedResult).toEqual(dump);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYWxpL2V4ZW1wbGUtamhpcHN0ZXIvdGVzdGJlZC9zcmMvdGVzdC9qYXZhc2NyaXB0L3NwZWMvYXBwL2FkbWluL21ldHJpY3MvbWV0cmljcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBZ0Q7QUFDaEQsMERBQThGO0FBRTlGLHVFQUF3RjtBQUN4RixxREFBbUQ7QUFFbkQsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsSUFBSSxPQUF1QixDQUFDO1FBQzVCLElBQUksUUFBK0IsQ0FBQztRQUVwQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQXVCLENBQUM7YUFDbkMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLGlCQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFjLENBQUMsQ0FBQztZQUN0QyxRQUFRLEdBQUcsaUJBQU8sQ0FBQyxHQUFHLENBQUMsK0JBQXFCLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFFakMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxNQUFNLFdBQVcsR0FBRyw4QkFBYyxHQUFHLHVCQUF1QixDQUFDO2dCQUM3RCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0MsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO2dCQUMvQixJQUFJLGNBQWMsR0FBbUIsSUFBSSxDQUFDO2dCQUMxQyxNQUFNLE9BQU8sR0FBWTtvQkFDdkIsR0FBRyxFQUFFLEVBQUU7b0JBQ1Asc0JBQXNCLEVBQUUsRUFBRTtvQkFDMUIsS0FBSyxFQUFFLEVBQUU7b0JBQ1QsUUFBUSxFQUFFLEVBQUU7b0JBQ1osU0FBUyxFQUFFLEVBQUU7b0JBQ2IsZ0JBQWdCLEVBQUUsRUFBRTtvQkFDcEIsY0FBYyxFQUFFLEVBQUU7aUJBQ25CLENBQUM7Z0JBRUYsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDeEMsY0FBYyxHQUFHLFFBQVEsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNuQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtnQkFDbkMsSUFBSSxjQUFjLEdBQXNCLElBQUksQ0FBQztnQkFDN0MsTUFBTSxJQUFJLEdBQWUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFFbkYsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDeEMsY0FBYyxHQUFHLFFBQVEsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL2FsaS9leGVtcGxlLWpoaXBzdGVyL3Rlc3RiZWQvc3JjL3Rlc3QvamF2YXNjcmlwdC9zcGVjL2FwcC9hZG1pbi9tZXRyaWNzL21ldHJpY3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBNZXRyaWNzU2VydmljZSwgTWV0cmljcywgVGhyZWFkRHVtcCB9IGZyb20gJ2FwcC9hZG1pbi9tZXRyaWNzL21ldHJpY3Muc2VydmljZSc7XG5pbXBvcnQgeyBTRVJWRVJfQVBJX1VSTCB9IGZyb20gJ2FwcC9hcHAuY29uc3RhbnRzJztcblxuZGVzY3JpYmUoJ1NlcnZpY2UgVGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdMb2dzIFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgbGV0IHNlcnZpY2U6IE1ldHJpY3NTZXJ2aWNlO1xuICAgIGxldCBodHRwTW9jazogSHR0cFRlc3RpbmdDb250cm9sbGVyO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdXG4gICAgICB9KTtcbiAgICAgIHNlcnZpY2UgPSBUZXN0QmVkLmdldChNZXRyaWNzU2VydmljZSk7XG4gICAgICBodHRwTW9jayA9IFRlc3RCZWQuZ2V0KEh0dHBUZXN0aW5nQ29udHJvbGxlcik7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgaHR0cE1vY2sudmVyaWZ5KCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnU2VydmljZSBtZXRob2RzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjYWxsIGNvcnJlY3QgVVJMJywgKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlLmdldE1ldHJpY3MoKS5zdWJzY3JpYmUoKTtcblxuICAgICAgICBjb25zdCByZXEgPSBodHRwTW9jay5leHBlY3RPbmUoeyBtZXRob2Q6ICdHRVQnIH0pO1xuICAgICAgICBjb25zdCByZXNvdXJjZVVybCA9IFNFUlZFUl9BUElfVVJMICsgJ21hbmFnZW1lbnQvamhpbWV0cmljcyc7XG4gICAgICAgIGV4cGVjdChyZXEucmVxdWVzdC51cmwpLnRvRXF1YWwocmVzb3VyY2VVcmwpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIE1ldHJpY3MnLCAoKSA9PiB7XG4gICAgICAgIGxldCBleHBlY3RlZFJlc3VsdDogTWV0cmljcyB8IG51bGwgPSBudWxsO1xuICAgICAgICBjb25zdCBtZXRyaWNzOiBNZXRyaWNzID0ge1xuICAgICAgICAgIGp2bToge30sXG4gICAgICAgICAgJ2h0dHAuc2VydmVyLnJlcXVlc3RzJzoge30sXG4gICAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgICAgIHNlcnZpY2VzOiB7fSxcbiAgICAgICAgICBkYXRhYmFzZXM6IHt9LFxuICAgICAgICAgIGdhcmJhZ2VDb2xsZWN0b3I6IHt9LFxuICAgICAgICAgIHByb2Nlc3NNZXRyaWNzOiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlcnZpY2UuZ2V0TWV0cmljcygpLnN1YnNjcmliZShyZWNlaXZlZCA9PiB7XG4gICAgICAgICAgZXhwZWN0ZWRSZXN1bHQgPSByZWNlaXZlZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKG1ldHJpY3MpO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwobWV0cmljcyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gVGhyZWFkIER1bXAnLCAoKSA9PiB7XG4gICAgICAgIGxldCBleHBlY3RlZFJlc3VsdDogVGhyZWFkRHVtcCB8IG51bGwgPSBudWxsO1xuICAgICAgICBjb25zdCBkdW1wOiBUaHJlYWREdW1wID0geyB0aHJlYWRzOiBbeyBuYW1lOiAndGVzdDEnLCB0aHJlYWRTdGF0ZTogJ1JVTk5BQkxFJyB9XSB9O1xuXG4gICAgICAgIHNlcnZpY2UudGhyZWFkRHVtcCgpLnN1YnNjcmliZShyZWNlaXZlZCA9PiB7XG4gICAgICAgICAgZXhwZWN0ZWRSZXN1bHQgPSByZWNlaXZlZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxID0gaHR0cE1vY2suZXhwZWN0T25lKHsgbWV0aG9kOiAnR0VUJyB9KTtcbiAgICAgICAgcmVxLmZsdXNoKGR1bXApO1xuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvRXF1YWwoZHVtcCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==