7afe7345e0227960593dfa3e4e18a362
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const password_strength_bar_component_1 = require("app/account/password/password-strength-bar.component");
describe('Component Tests', () => {
    describe('PasswordStrengthBarComponent', () => {
        let comp;
        let fixture;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                declarations: [password_strength_bar_component_1.PasswordStrengthBarComponent]
            })
                .overrideTemplate(password_strength_bar_component_1.PasswordStrengthBarComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(password_strength_bar_component_1.PasswordStrengthBarComponent);
            comp = fixture.componentInstance;
        });
        describe('PasswordStrengthBarComponents', () => {
            it('should initialize with default values', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.colors).toEqual(['#F00', '#F90', '#FF0', '#9F0', '#0F0']);
                expect(comp.getColor(0).idx).toBe(1);
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
            });
            it('should increase strength upon password value change', () => {
                expect(comp.measureStrength('')).toBe(0);
                expect(comp.measureStrength('aa')).toBeGreaterThanOrEqual(comp.measureStrength(''));
                expect(comp.measureStrength('aa^6')).toBeGreaterThanOrEqual(comp.measureStrength('aa'));
                expect(comp.measureStrength('Aa090(**)')).toBeGreaterThanOrEqual(comp.measureStrength('aa^6'));
                expect(comp.measureStrength('Aa090(**)+-07365')).toBeGreaterThanOrEqual(comp.measureStrength('Aa090(**)'));
            });
            it('should change the color based on strength', () => {
                expect(comp.getColor(0).color).toBe(comp.colors[0]);
                expect(comp.getColor(11).color).toBe(comp.colors[1]);
                expect(comp.getColor(22).color).toBe(comp.colors[2]);
                expect(comp.getColor(33).color).toBe(comp.colors[3]);
                expect(comp.getColor(44).color).toBe(comp.colors[4]);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYWxpL2V4ZW1wbGUtamhpcHN0ZXIvdGVzdGJlZC9zcmMvdGVzdC9qYXZhc2NyaXB0L3NwZWMvYXBwL2FjY291bnQvcGFzc3dvcmQvcGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlFO0FBRXpFLDBHQUFvRztBQUVwRyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBSSxJQUFrQyxDQUFDO1FBQ3ZDLElBQUksT0FBdUQsQ0FBQztRQUU1RCxVQUFVLENBQUMsZUFBSyxDQUFDLEdBQUcsRUFBRTtZQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QixZQUFZLEVBQUUsQ0FBQyw4REFBNEIsQ0FBQzthQUM3QyxDQUFDO2lCQUNDLGdCQUFnQixDQUFDLDhEQUE0QixFQUFFLEVBQUUsQ0FBQztpQkFDbEQsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyw4REFBNEIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQzdDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7Z0JBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMscURBQXFELEVBQUUsR0FBRyxFQUFFO2dCQUM3RCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BGLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUN4RixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDL0YsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM3RyxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7Z0JBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvYWxpL2V4ZW1wbGUtamhpcHN0ZXIvdGVzdGJlZC9zcmMvdGVzdC9qYXZhc2NyaXB0L3NwZWMvYXBwL2FjY291bnQvcGFzc3dvcmQvcGFzc3dvcmQtc3RyZW5ndGgtYmFyLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQsIGFzeW5jIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcblxuaW1wb3J0IHsgUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudCB9IGZyb20gJ2FwcC9hY2NvdW50L3Bhc3N3b3JkL3Bhc3N3b3JkLXN0cmVuZ3RoLWJhci5jb21wb25lbnQnO1xuXG5kZXNjcmliZSgnQ29tcG9uZW50IFRlc3RzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudCcsICgpID0+IHtcbiAgICBsZXQgY29tcDogUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50PjtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMoKCkgPT4ge1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbUGFzc3dvcmRTdHJlbmd0aEJhckNvbXBvbmVudF1cbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKFBhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnQsICcnKVxuICAgICAgICAuY29tcGlsZUNvbXBvbmVudHMoKTtcbiAgICB9KSk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChQYXNzd29yZFN0cmVuZ3RoQmFyQ29tcG9uZW50KTtcbiAgICAgIGNvbXAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1Bhc3N3b3JkU3RyZW5ndGhCYXJDb21wb25lbnRzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggZGVmYXVsdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnJykpLnRvQmUoMCk7XG4gICAgICAgIGV4cGVjdChjb21wLmNvbG9ycykudG9FcXVhbChbJyNGMDAnLCAnI0Y5MCcsICcjRkYwJywgJyM5RjAnLCAnIzBGMCddKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMCkuaWR4KS50b0JlKDEpO1xuICAgICAgICBleHBlY3QoY29tcC5nZXRDb2xvcigwKS5jb2xvcikudG9CZShjb21wLmNvbG9yc1swXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBpbmNyZWFzZSBzdHJlbmd0aCB1cG9uIHBhc3N3b3JkIHZhbHVlIGNoYW5nZScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSkudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYScpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCcnKSk7XG4gICAgICAgIGV4cGVjdChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWFeNicpKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdhYScpKTtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdBYTA5MCgqKiknKSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbChjb21wLm1lYXN1cmVTdHJlbmd0aCgnYWFeNicpKTtcbiAgICAgICAgZXhwZWN0KGNvbXAubWVhc3VyZVN0cmVuZ3RoKCdBYTA5MCgqKikrLTA3MzY1JykpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoY29tcC5tZWFzdXJlU3RyZW5ndGgoJ0FhMDkwKCoqKScpKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0aGUgY29sb3IgYmFzZWQgb24gc3RyZW5ndGgnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wLmdldENvbG9yKDApLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzBdKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMTEpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzFdKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMjIpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzJdKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoMzMpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzNdKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuZ2V0Q29sb3IoNDQpLmNvbG9yKS50b0JlKGNvbXAuY29sb3JzWzRdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9