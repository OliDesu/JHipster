{"file":"/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/metrics/metrics.component.ts","mappings":";;;AAAA,wCAA8F;AAC9F,8CAAyC;AAEzC,uDAA4F;AAO5F,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAK3B,YAAoB,cAA8B,EAAU,cAAiC;QAAzE,mBAAc,GAAd,cAAc,CAAgB;QAAU,mBAAc,GAAd,cAAc,CAAmB;QAF7F,oBAAe,GAAG,IAAI,CAAC;IAEyE,CAAC;IAEjG,QAAQ;QACN,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,cAAc;aAChB,UAAU,EAAE;aACZ,IAAI,CACH,mBAAO,CACL,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,EACtC,CAAC,OAAgB,EAAE,UAAsB,EAAE,EAAE;YAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACtC,CAAC,CACF,CACF;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,gBAAgB,CAAC,GAAe;QAC9B,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3C,CAAC;IAED,iCAAiC,CAAC,GAAe;QAC/C,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC;IACzF,CAAC;CACF,CAAA;AApCY,gBAAgB;IAL5B,gBAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,kBAAa,0BAA0B,CAAA;QACvC,eAAe,EAAE,8BAAuB,CAAC,MAAM;KAChD,CAAC;6CAMoC,gCAAc,EAA0B,wBAAiB;GALlF,gBAAgB,CAoC5B;AApCY,4CAAgB","names":[],"sources":["/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/metrics/metrics.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { flatMap } from 'rxjs/operators';\n\nimport { MetricsService, Metrics, MetricsKey, ThreadDump, Thread } from './metrics.service';\n\n@Component({\n  selector: 'jhi-metrics',\n  templateUrl: './metrics.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MetricsComponent implements OnInit {\n  metrics?: Metrics;\n  threads?: Thread[];\n  updatingMetrics = true;\n\n  constructor(private metricsService: MetricsService, private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  refresh(): void {\n    this.updatingMetrics = true;\n    this.metricsService\n      .getMetrics()\n      .pipe(\n        flatMap(\n          () => this.metricsService.threadDump(),\n          (metrics: Metrics, threadDump: ThreadDump) => {\n            this.metrics = metrics;\n            this.threads = threadDump.threads;\n            this.updatingMetrics = false;\n            this.changeDetector.detectChanges();\n          }\n        )\n      )\n      .subscribe();\n  }\n\n  metricsKeyExists(key: MetricsKey): boolean {\n    return this.metrics && this.metrics[key];\n  }\n\n  metricsKeyExistsAndObjectNotEmpty(key: MetricsKey): boolean {\n    return this.metrics && this.metrics[key] && JSON.stringify(this.metrics[key]) !== '{}';\n  }\n}\n"],"version":3}