{"file":"/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password/password.component.ts","mappings":";;;AAAA,wCAAkD;AAClD,0CAAyD;AAGzD,mEAA+D;AAE/D,yDAAqD;AAMrD,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAW5B,YAAoB,eAAgC,EAAU,cAA8B,EAAU,EAAe;QAAjG,oBAAe,GAAf,eAAe,CAAiB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,OAAE,GAAF,EAAE,CAAa;QAVrH,eAAU,GAAG,KAAK,CAAC;QACnB,UAAK,GAAG,KAAK,CAAC;QACd,YAAO,GAAG,KAAK,CAAC;QAEhB,iBAAY,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC3B,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,kBAAU,CAAC,QAAQ,CAAC,CAAC;YAC5C,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,kBAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3F,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,kBAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAChG,CAAC,CAAC;IAEqH,CAAC;IAEzH,QAAQ;QACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;IACjD,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAE,CAAC,KAAK,CAAC;QAClE,IAAI,WAAW,KAAK,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAE,CAAC,KAAK,EAAE;YACrE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAE,CAAC,KAAK,CAAC,CAAC,SAAS,CACjG,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAC3B,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAC1B,CAAC;SACH;IACH,CAAC;CACF,CAAA;AAhCY,iBAAiB;IAJ7B,gBAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,kBAAa,2BAA2B,CAAA;KACzC,CAAC;6CAYqC,kCAAe,EAA0B,gCAAc,EAAc,mBAAW;GAX1G,iBAAiB,CAgC7B;AAhCY,8CAAiB","names":[],"sources":["/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password/password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { Account } from 'app/core/user/account.model';\nimport { PasswordService } from './password.service';\n\n@Component({\n  selector: 'jhi-password',\n  templateUrl: './password.component.html'\n})\nexport class PasswordComponent implements OnInit {\n  doNotMatch = false;\n  error = false;\n  success = false;\n  account$?: Observable<Account | null>;\n  passwordForm = this.fb.group({\n    currentPassword: ['', [Validators.required]],\n    newPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]]\n  });\n\n  constructor(private passwordService: PasswordService, private accountService: AccountService, private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.account$ = this.accountService.identity();\n  }\n\n  changePassword(): void {\n    this.error = false;\n    this.success = false;\n    this.doNotMatch = false;\n\n    const newPassword = this.passwordForm.get(['newPassword'])!.value;\n    if (newPassword !== this.passwordForm.get(['confirmPassword'])!.value) {\n      this.doNotMatch = true;\n    } else {\n      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword'])!.value).subscribe(\n        () => (this.success = true),\n        () => (this.error = true)\n      );\n    }\n  }\n}\n"],"version":3}