05e65c18c249f6ff8a90b299f6261a4d
"use strict";

/* istanbul ignore next */
var cov_1s6hpjtwhs = function () {
  var path = "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password/password.component.ts";
  var hash = "43c6900b0e7475898585fe480c5510001a8d153f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/account/password/password.component.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 41
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "6": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "7": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "8": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 45
        }
      },
      "9": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 21
        }
      },
      "10": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "11": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "12": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "13": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 55
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "16": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 29
        }
      },
      "17": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "18": {
        start: {
          line: 29,
          column: 28
        },
        end: {
          line: 29,
          column: 72
        }
      },
      "19": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 35,
          column: 9
        }
      },
      "20": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "21": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 167
        }
      },
      "22": {
        start: {
          line: 34,
          column: 118
        },
        end: {
          line: 34,
          column: 137
        }
      },
      "23": {
        start: {
          line: 34,
          column: 147
        },
        end: {
          line: 34,
          column: 164
        }
      },
      "24": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 44,
          column: 22
        }
      },
      "25": {
        start: {
          line: 45,
          column: 0
        },
        end: {
          line: 45,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 53
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 21
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 111
          },
          end: {
            line: 34,
            column: 112
          }
        },
        loc: {
          start: {
            line: 34,
            column: 118
          },
          end: {
            line: 34,
            column: 137
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 140
          },
          end: {
            line: 34,
            column: 141
          }
        },
        loc: {
          start: {
            line: 34,
            column: 147
          },
          end: {
            line: 34,
            column: 164
          }
        },
        line: 34
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }, {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 35,
            column: 9
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "43c6900b0e7475898585fe480c5510001a8d153f"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_1s6hpjtwhs.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const tslib_1 =
/* istanbul ignore next */
(cov_1s6hpjtwhs.s[1]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_1s6hpjtwhs.s[2]++, require("@angular/core"));
const forms_1 =
/* istanbul ignore next */
(cov_1s6hpjtwhs.s[3]++, require("@angular/forms"));
const account_service_1 =
/* istanbul ignore next */
(cov_1s6hpjtwhs.s[4]++, require("app/core/auth/account.service"));
const password_service_1 =
/* istanbul ignore next */
(cov_1s6hpjtwhs.s[5]++, require("./password.service"));

/* istanbul ignore next */
cov_1s6hpjtwhs.s[6]++;
let PasswordComponent = class PasswordComponent {
  constructor(passwordService, accountService, fb) {
    /* istanbul ignore next */
    cov_1s6hpjtwhs.f[0]++;
    cov_1s6hpjtwhs.s[7]++;
    this.passwordService = passwordService;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[8]++;
    this.accountService = accountService;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[9]++;
    this.fb = fb;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[10]++;
    this.doNotMatch = false;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[11]++;
    this.error = false;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[12]++;
    this.success = false;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[13]++;
    this.passwordForm = this.fb.group({
      currentPassword: ['', [forms_1.Validators.required]],
      newPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]],
      confirmPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]]
    });
  }

  ngOnInit() {
    /* istanbul ignore next */
    cov_1s6hpjtwhs.f[1]++;
    cov_1s6hpjtwhs.s[14]++;
    this.account$ = this.accountService.identity();
  }

  changePassword() {
    /* istanbul ignore next */
    cov_1s6hpjtwhs.f[2]++;
    cov_1s6hpjtwhs.s[15]++;
    this.error = false;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[16]++;
    this.success = false;

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[17]++;
    this.doNotMatch = false;
    const newPassword =
    /* istanbul ignore next */
    (cov_1s6hpjtwhs.s[18]++, this.passwordForm.get(['newPassword']).value);

    /* istanbul ignore next */
    cov_1s6hpjtwhs.s[19]++;

    if (newPassword !== this.passwordForm.get(['confirmPassword']).value) {
      /* istanbul ignore next */
      cov_1s6hpjtwhs.b[0][0]++;
      cov_1s6hpjtwhs.s[20]++;
      this.doNotMatch = true;
    } else {
      /* istanbul ignore next */
      cov_1s6hpjtwhs.b[0][1]++;
      cov_1s6hpjtwhs.s[21]++;
      this.passwordService.save(newPassword, this.passwordForm.get(['currentPassword']).value).subscribe(() => {
        /* istanbul ignore next */
        cov_1s6hpjtwhs.f[3]++;
        cov_1s6hpjtwhs.s[22]++;
        return this.success = true;
      }, () => {
        /* istanbul ignore next */
        cov_1s6hpjtwhs.f[4]++;
        cov_1s6hpjtwhs.s[23]++;
        return this.error = true;
      });
    }
  }

};

/* istanbul ignore next */
cov_1s6hpjtwhs.s[24]++;
PasswordComponent = tslib_1.__decorate([core_1.Component({
  selector: 'jhi-password',
  template: require('./password.component.html')
}), tslib_1.__metadata("design:paramtypes", [password_service_1.PasswordService, account_service_1.AccountService, forms_1.FormBuilder])], PasswordComponent);

/* istanbul ignore next */
cov_1s6hpjtwhs.s[25]++;
exports.PasswordComponent = PasswordComponent;