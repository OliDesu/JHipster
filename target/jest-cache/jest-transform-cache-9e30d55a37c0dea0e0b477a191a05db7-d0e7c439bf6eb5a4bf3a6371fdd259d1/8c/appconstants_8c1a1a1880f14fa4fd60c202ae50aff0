7cae31184e9caae375a1cd5770447d39
"use strict"; // These constants are injected via webpack environment variables.
// You can add more variables in webpack.common.js or in profile specific webpack.<dev|prod>.js files.
// If you change the values in the webpack config files, you need to re run webpack to update the application

/* istanbul ignore next */
var cov_2cvatld4ar = function () {
  var path = "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/app.constants.ts";
  var hash = "d966c7dda8bab753ed30b06c07b7d4ec5a39393f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/app.constants.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "2": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 69
        }
      },
      "3": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 52
        }
      },
      "4": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 54
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {},
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "d966c7dda8bab753ed30b06c07b7d4ec5a39393f"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_2cvatld4ar.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_2cvatld4ar.s[1]++;
exports.VERSION = process.env.VERSION;

/* istanbul ignore next */
cov_2cvatld4ar.s[2]++;
exports.DEBUG_INFO_ENABLED = Boolean(process.env.DEBUG_INFO_ENABLED);

/* istanbul ignore next */
cov_2cvatld4ar.s[3]++;
exports.SERVER_API_URL = process.env.SERVER_API_URL;

/* istanbul ignore next */
cov_2cvatld4ar.s[4]++;
exports.BUILD_TIMESTAMP = process.env.BUILD_TIMESTAMP;