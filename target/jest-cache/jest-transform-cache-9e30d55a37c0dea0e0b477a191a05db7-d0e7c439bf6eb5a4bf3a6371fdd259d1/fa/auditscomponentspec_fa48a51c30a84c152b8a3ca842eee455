fc8214efcd4e7fd9f6ca232fda7c4127
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const rxjs_1 = require("rxjs");
const jest_date_mock_1 = require("jest-date-mock");
const test_module_1 = require("../../../test.module");
const audits_component_1 = require("app/admin/audits/audits.component");
const audits_service_1 = require("app/admin/audits/audits.service");
const audit_model_1 = require("app/admin/audits/audit.model");
const pagination_constants_1 = require("app/shared/constants/pagination.constants");
function build2DigitsDatePart(datePart) {
    return `0${datePart}`.slice(-2);
}
function getDate(isToday = true) {
    let date = new Date();
    if (isToday) {
        // Today + 1 day - needed if the current day must be included
        date.setDate(date.getDate() + 1);
    }
    else {
        // get last month
        if (date.getMonth() === 0) {
            date = new Date(date.getFullYear() - 1, 11, date.getDate());
        }
        else {
            date = new Date(date.getFullYear(), date.getMonth() - 1, date.getDate());
        }
    }
    const monthString = build2DigitsDatePart(date.getMonth() + 1);
    const dateString = build2DigitsDatePart(date.getDate());
    return `${date.getFullYear()}-${monthString}-${dateString}`;
}
describe('Component Tests', () => {
    describe('AuditsComponent', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.CoopcycleTestModule],
                declarations: [audits_component_1.AuditsComponent],
                providers: [audits_service_1.AuditsService]
            })
                .overrideTemplate(audits_component_1.AuditsComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(audits_component_1.AuditsComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(audits_service_1.AuditsService);
        });
        describe('today function', () => {
            it('should set toDate to current date', () => {
                comp.ngOnInit();
                expect(comp.toDate).toBe(getDate());
            });
            it('if current day is last day of month then should set toDate to first day of next month', () => {
                jest_date_mock_1.advanceTo(new Date(2019, 0, 31, 0, 0, 0));
                comp.ngOnInit();
                expect(comp.toDate).toBe('2019-02-01');
            });
            it('if current day is not last day of month then should set toDate to next day of current month', () => {
                jest_date_mock_1.advanceTo(new Date(2019, 0, 27, 0, 0, 0));
                comp.ngOnInit();
                expect(comp.toDate).toBe('2019-01-28');
            });
        });
        describe('previousMonth function', () => {
            it('should set fromDate to previous month', () => {
                comp.ngOnInit();
                expect(comp.fromDate).toBe(getDate(false));
            });
            it('if current month is January then should set fromDate to previous year last month', () => {
                jest_date_mock_1.advanceTo(new Date(2019, 0, 20, 0, 0, 0));
                comp.ngOnInit();
                expect(comp.fromDate).toBe('2018-12-20');
            });
            it('if current month is not January then should set fromDate to current year previous month', () => {
                jest_date_mock_1.advanceTo(new Date(2019, 1, 20, 0, 0, 0));
                comp.ngOnInit();
                expect(comp.fromDate).toBe('2019-01-20');
            });
        });
        describe('By default, on init', () => {
            it('should set all default values correctly', () => {
                fixture.detectChanges();
                expect(comp.toDate).toBe(getDate());
                expect(comp.fromDate).toBe(getDate(false));
                expect(comp.itemsPerPage).toBe(pagination_constants_1.ITEMS_PER_PAGE);
                expect(comp.page).toBe(10);
                expect(comp.ascending).toBe(false);
                expect(comp.predicate).toBe('id');
            });
        });
        describe('OnInit', () => {
            it('Should call load all on init', () => {
                // GIVEN
                const headers = new http_1.HttpHeaders().append('X-Total-Count', '1');
                const audit = new audit_model_1.Audit({ remoteAddress: '127.0.0.1', sessionId: '123' }, 'user', '20140101', 'AUTHENTICATION_SUCCESS');
                spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({
                    body: [audit],
                    headers
                })));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.query).toHaveBeenCalled();
                expect(comp.audits && comp.audits[0]).toEqual(jasmine.objectContaining(audit));
                expect(comp.totalItems).toBe(1);
            });
        });
        describe('Create sort object', () => {
            beforeEach(() => {
                comp.toDate = getDate();
                comp.fromDate = getDate(false);
                spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: null })));
            });
            it('Should sort only by id asc', () => {
                // GIVEN
                comp.predicate = 'id';
                comp.ascending = false;
                // WHEN
                comp.transition();
                // THEN
                expect(service.query).toBeCalledWith(expect.objectContaining({
                    sort: ['id,desc']
                }));
            });
            it('Should sort by timestamp asc then by id', () => {
                // GIVEN
                comp.predicate = 'timestamp';
                comp.ascending = true;
                // WHEN
                comp.transition();
                // THEN
                expect(service.query).toBeCalledWith(expect.objectContaining({
                    sort: ['timestamp,asc', 'id']
                }));
            });
        });
        describe('loadPage', () => {
            beforeEach(() => {
                comp.toDate = getDate();
                comp.fromDate = getDate(false);
                comp.previousPage = 1;
                spyOn(comp, 'transition');
            });
            it('Should not reload page already shown', () => {
                // WHEN
                comp.loadPage(1);
                // THEN
                expect(comp.transition).not.toBeCalled();
            });
            it('Should load new page', () => {
                // WHEN
                comp.loadPage(2);
                // THEN
                expect(comp.previousPage).toBe(2);
                expect(comp.transition).toBeCalled();
            });
        });
        describe('transition', () => {
            beforeEach(() => {
                spyOn(service, 'query').and.returnValue(rxjs_1.of(new http_1.HttpResponse({ body: null })));
            });
            it('Should not query data if fromDate and toDate are empty', () => {
                // WHEN
                comp.transition();
                // THEN
                expect(comp.canLoad()).toBe(false);
                expect(service.query).not.toBeCalled();
            });
            it('Should query data if fromDate and toDate are not empty', () => {
                // GIVEN
                comp.toDate = getDate();
                comp.fromDate = getDate(false);
                // WHEN
                comp.transition();
                // THEN
                expect(comp.canLoad()).toBe(true);
                expect(service.query).toBeCalled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,