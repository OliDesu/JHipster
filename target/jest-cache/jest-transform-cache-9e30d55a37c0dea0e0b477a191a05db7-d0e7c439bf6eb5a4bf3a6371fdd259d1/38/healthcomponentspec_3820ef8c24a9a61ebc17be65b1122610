fd21d31d69df2817085b55d4a92af2c5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const http_1 = require("@angular/common/http");
const rxjs_1 = require("rxjs");
const test_module_1 = require("../../../test.module");
const health_component_1 = require("app/admin/health/health.component");
const health_service_1 = require("app/admin/health/health.service");
describe('Component Tests', () => {
    describe('HealthComponent', () => {
        let comp;
        let fixture;
        let service;
        beforeEach(testing_1.async(() => {
            testing_1.TestBed.configureTestingModule({
                imports: [test_module_1.CoopcycleTestModule],
                declarations: [health_component_1.HealthComponent]
            })
                .overrideTemplate(health_component_1.HealthComponent, '')
                .compileComponents();
        }));
        beforeEach(() => {
            fixture = testing_1.TestBed.createComponent(health_component_1.HealthComponent);
            comp = fixture.componentInstance;
            service = fixture.debugElement.injector.get(health_service_1.HealthService);
        });
        describe('getBadgeClass', () => {
            it('should get badge class', () => {
                const upBadgeClass = comp.getBadgeClass('UP');
                const downBadgeClass = comp.getBadgeClass('DOWN');
                expect(upBadgeClass).toEqual('badge-success');
                expect(downBadgeClass).toEqual('badge-danger');
            });
        });
        describe('refresh', () => {
            it('should call refresh on init', () => {
                // GIVEN
                const health = { status: 'UP', components: { mail: { status: 'UP', details: 'mailDetails' } } };
                spyOn(service, 'checkHealth').and.returnValue(rxjs_1.of(health));
                // WHEN
                comp.ngOnInit();
                // THEN
                expect(service.checkHealth).toHaveBeenCalled();
                expect(comp.health).toEqual(health);
            });
            it('should handle a 503 on refreshing health data', () => {
                // GIVEN
                const health = { status: 'DOWN', components: { mail: { status: 'DOWN', details: 'mailDetails' } } };
                spyOn(service, 'checkHealth').and.returnValue(rxjs_1.throwError(new http_1.HttpErrorResponse({ status: 503, error: health })));
                // WHEN
                comp.refresh();
                // THEN
                expect(service.checkHealth).toHaveBeenCalled();
                expect(comp.health).toEqual(health);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvYWxpL2V4ZW1wbGUtamhpcHN0ZXIvdGVzdGJlZC9zcmMvdGVzdC9qYXZhc2NyaXB0L3NwZWMvYXBwL2FkbWluL2hlYWx0aC9oZWFsdGguY29tcG9uZW50LnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUU7QUFDekUsK0NBQXlEO0FBQ3pELCtCQUFzQztBQUV0QyxzREFBMkQ7QUFDM0Qsd0VBQW9FO0FBQ3BFLG9FQUF3RTtBQUV4RSxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsSUFBSSxJQUFxQixDQUFDO1FBQzFCLElBQUksT0FBMEMsQ0FBQztRQUMvQyxJQUFJLE9BQXNCLENBQUM7UUFFM0IsVUFBVSxDQUFDLGVBQUssQ0FBQyxHQUFHLEVBQUU7WUFDcEIsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0IsT0FBTyxFQUFFLENBQUMsaUNBQW1CLENBQUM7Z0JBQzlCLFlBQVksRUFBRSxDQUFDLGtDQUFlLENBQUM7YUFDaEMsQ0FBQztpQkFDQyxnQkFBZ0IsQ0FBQyxrQ0FBZSxFQUFFLEVBQUUsQ0FBQztpQkFDckMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxrQ0FBZSxDQUFDLENBQUM7WUFDbkQsSUFBSSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztZQUNqQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLDhCQUFhLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1lBQzdCLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7Z0JBQ2hDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQ3ZCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7Z0JBQ3JDLFFBQVE7Z0JBQ1IsTUFBTSxNQUFNLEdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsQ0FBQztnQkFDeEcsS0FBSyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUUxRCxPQUFPO2dCQUNQLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFaEIsT0FBTztnQkFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEdBQUcsRUFBRTtnQkFDdkQsUUFBUTtnQkFDUixNQUFNLE1BQU0sR0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUM1RyxLQUFLLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsaUJBQVUsQ0FBQyxJQUFJLHdCQUFpQixDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWpILE9BQU87Z0JBQ1AsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUVmLE9BQU87Z0JBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9hbGkvZXhlbXBsZS1qaGlwc3Rlci90ZXN0YmVkL3NyYy90ZXN0L2phdmFzY3JpcHQvc3BlYy9hcHAvYWRtaW4vaGVhbHRoL2hlYWx0aC5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkLCBhc3luYyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENvb3BjeWNsZVRlc3RNb2R1bGUgfSBmcm9tICcuLi8uLi8uLi90ZXN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBIZWFsdGhDb21wb25lbnQgfSBmcm9tICdhcHAvYWRtaW4vaGVhbHRoL2hlYWx0aC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGVhbHRoU2VydmljZSwgSGVhbHRoIH0gZnJvbSAnYXBwL2FkbWluL2hlYWx0aC9oZWFsdGguc2VydmljZSc7XG5cbmRlc2NyaWJlKCdDb21wb25lbnQgVGVzdHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdIZWFsdGhDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXA6IEhlYWx0aENvbXBvbmVudDtcbiAgICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxIZWFsdGhDb21wb25lbnQ+O1xuICAgIGxldCBzZXJ2aWNlOiBIZWFsdGhTZXJ2aWNlO1xuXG4gICAgYmVmb3JlRWFjaChhc3luYygoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBpbXBvcnRzOiBbQ29vcGN5Y2xlVGVzdE1vZHVsZV0sXG4gICAgICAgIGRlY2xhcmF0aW9uczogW0hlYWx0aENvbXBvbmVudF1cbiAgICAgIH0pXG4gICAgICAgIC5vdmVycmlkZVRlbXBsYXRlKEhlYWx0aENvbXBvbmVudCwgJycpXG4gICAgICAgIC5jb21waWxlQ29tcG9uZW50cygpO1xuICAgIH0pKTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEhlYWx0aENvbXBvbmVudCk7XG4gICAgICBjb21wID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHNlcnZpY2UgPSBmaXh0dXJlLmRlYnVnRWxlbWVudC5pbmplY3Rvci5nZXQoSGVhbHRoU2VydmljZSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0QmFkZ2VDbGFzcycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZ2V0IGJhZGdlIGNsYXNzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB1cEJhZGdlQ2xhc3MgPSBjb21wLmdldEJhZGdlQ2xhc3MoJ1VQJyk7XG4gICAgICAgIGNvbnN0IGRvd25CYWRnZUNsYXNzID0gY29tcC5nZXRCYWRnZUNsYXNzKCdET1dOJyk7XG4gICAgICAgIGV4cGVjdCh1cEJhZGdlQ2xhc3MpLnRvRXF1YWwoJ2JhZGdlLXN1Y2Nlc3MnKTtcbiAgICAgICAgZXhwZWN0KGRvd25CYWRnZUNsYXNzKS50b0VxdWFsKCdiYWRnZS1kYW5nZXInKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3JlZnJlc2gnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgcmVmcmVzaCBvbiBpbml0JywgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBoZWFsdGg6IEhlYWx0aCA9IHsgc3RhdHVzOiAnVVAnLCBjb21wb25lbnRzOiB7IG1haWw6IHsgc3RhdHVzOiAnVVAnLCBkZXRhaWxzOiAnbWFpbERldGFpbHMnIH0gfSB9O1xuICAgICAgICBzcHlPbihzZXJ2aWNlLCAnY2hlY2tIZWFsdGgnKS5hbmQucmV0dXJuVmFsdWUob2YoaGVhbHRoKSk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBjb21wLm5nT25Jbml0KCk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc2VydmljZS5jaGVja0hlYWx0aCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QoY29tcC5oZWFsdGgpLnRvRXF1YWwoaGVhbHRoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBhIDUwMyBvbiByZWZyZXNoaW5nIGhlYWx0aCBkYXRhJywgKCkgPT4ge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBoZWFsdGg6IEhlYWx0aCA9IHsgc3RhdHVzOiAnRE9XTicsIGNvbXBvbmVudHM6IHsgbWFpbDogeyBzdGF0dXM6ICdET1dOJywgZGV0YWlsczogJ21haWxEZXRhaWxzJyB9IH0gfTtcbiAgICAgICAgc3B5T24oc2VydmljZSwgJ2NoZWNrSGVhbHRoJykuYW5kLnJldHVyblZhbHVlKHRocm93RXJyb3IobmV3IEh0dHBFcnJvclJlc3BvbnNlKHsgc3RhdHVzOiA1MDMsIGVycm9yOiBoZWFsdGggfSkpKTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIGNvbXAucmVmcmVzaCgpO1xuXG4gICAgICAgIC8vIFRIRU5cbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuY2hlY2tIZWFsdGgpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgZXhwZWN0KGNvbXAuaGVhbHRoKS50b0VxdWFsKGhlYWx0aCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==