{"file":"/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/health/health.component.ts","mappings":";;;AAAA,wCAAkD;AAElD,6DAAsD;AAEtD,qDAAiG;AACjG,qEAAgE;AAMhE,IAAa,eAAe,GAA5B,MAAa,eAAe;IAG1B,YAAoB,YAAsB,EAAU,aAA4B;QAA5D,iBAAY,GAAZ,YAAY,CAAU;QAAU,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAEpF,QAAQ;QACN,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,WAAyB;QACrC,IAAI,WAAW,KAAK,IAAI,EAAE;YACxB,OAAO,eAAe,CAAC;SACxB;aAAM;YACL,OAAO,cAAc,CAAC;SACvB;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,SAAS,CACxC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAChC,CAAC,KAAwB,EAAE,EAAE;YAC3B,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBACxB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;aAC3B;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,MAAgD;QACzD,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,6CAAoB,CAAC,CAAC;QAC9D,QAAQ,CAAC,iBAAiB,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7C,CAAC;CACF,CAAA;AAhCY,eAAe;IAJ3B,gBAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,kBAAa,yBAAyB,CAAA;KACvC,CAAC;6CAIkC,uBAAQ,EAAyB,8BAAa;GAHrE,eAAe,CAgC3B;AAhCY,0CAAe","names":[],"sources":["/home/ali/exemple-jhipster/testbed/src/main/webapp/app/admin/health/health.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { HealthService, HealthStatus, Health, HealthKey, HealthDetails } from './health.service';\nimport { HealthModalComponent } from './health-modal.component';\n\n@Component({\n  selector: 'jhi-health',\n  templateUrl: './health.component.html'\n})\nexport class HealthComponent implements OnInit {\n  health?: Health;\n\n  constructor(private modalService: NgbModal, private healthService: HealthService) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  getBadgeClass(statusState: HealthStatus): string {\n    if (statusState === 'UP') {\n      return 'badge-success';\n    } else {\n      return 'badge-danger';\n    }\n  }\n\n  refresh(): void {\n    this.healthService.checkHealth().subscribe(\n      health => (this.health = health),\n      (error: HttpErrorResponse) => {\n        if (error.status === 503) {\n          this.health = error.error;\n        }\n      }\n    );\n  }\n\n  showHealth(health: { key: HealthKey; value: HealthDetails }): void {\n    const modalRef = this.modalService.open(HealthModalComponent);\n    modalRef.componentInstance.health = health;\n  }\n}\n"],"version":3}