61e39311873ef388665f16261d9a773d
"use strict";

/* istanbul ignore next */
var cov_ttllo176d = function () {
  var path = "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/core/login/login.service.ts";
  var hash = "6badfecdaa6a0bd47bd77ae1e118622bc31fdd0f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ali/exemple-jhipster/testbed/src/main/webapp/app/core/login/login.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 20
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "5": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 7,
          column: 68
        }
      },
      "6": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 19,
          column: 1
        }
      },
      "7": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 45
        }
      },
      "8": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 53
        }
      },
      "9": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 126
        }
      },
      "10": {
        start: {
          line: 14,
          column: 89
        },
        end: {
          line: 14,
          column: 123
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 109
        }
      },
      "12": {
        start: {
          line: 17,
          column: 69
        },
        end: {
          line: 17,
          column: 107
        }
      },
      "13": {
        start: {
          line: 20,
          column: 0
        },
        end: {
          line: 23,
          column: 17
        }
      },
      "14": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 52
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 83
          },
          end: {
            line: 14,
            column: 84
          }
        },
        loc: {
          start: {
            line: 14,
            column: 89
          },
          end: {
            line: 14,
            column: 123
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 13
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 17,
            column: 63
          },
          end: {
            line: 17,
            column: 64
          }
        },
        loc: {
          start: {
            line: 17,
            column: 69
          },
          end: {
            line: 17,
            column: 107
          }
        },
        line: 17
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "6badfecdaa6a0bd47bd77ae1e118622bc31fdd0f"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

cov_ttllo176d.s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const tslib_1 =
/* istanbul ignore next */
(cov_ttllo176d.s[1]++, require("tslib"));
const core_1 =
/* istanbul ignore next */
(cov_ttllo176d.s[2]++, require("@angular/core"));
const operators_1 =
/* istanbul ignore next */
(cov_ttllo176d.s[3]++, require("rxjs/operators"));
const account_service_1 =
/* istanbul ignore next */
(cov_ttllo176d.s[4]++, require("app/core/auth/account.service"));
const auth_jwt_service_1 =
/* istanbul ignore next */
(cov_ttllo176d.s[5]++, require("app/core/auth/auth-jwt.service"));

/* istanbul ignore next */
cov_ttllo176d.s[6]++;
let LoginService = class LoginService {
  constructor(accountService, authServerProvider) {
    /* istanbul ignore next */
    cov_ttllo176d.f[0]++;
    cov_ttllo176d.s[7]++;
    this.accountService = accountService;

    /* istanbul ignore next */
    cov_ttllo176d.s[8]++;
    this.authServerProvider = authServerProvider;
  }

  login(credentials) {
    /* istanbul ignore next */
    cov_ttllo176d.f[1]++;
    cov_ttllo176d.s[9]++;
    return this.authServerProvider.login(credentials).pipe(operators_1.flatMap(() => {
      /* istanbul ignore next */
      cov_ttllo176d.f[2]++;
      cov_ttllo176d.s[10]++;
      return this.accountService.identity(true);
    }));
  }

  logout() {
    /* istanbul ignore next */
    cov_ttllo176d.f[3]++;
    cov_ttllo176d.s[11]++;
    this.authServerProvider.logout().subscribe(null, null, () => {
      /* istanbul ignore next */
      cov_ttllo176d.f[4]++;
      cov_ttllo176d.s[12]++;
      return this.accountService.authenticate(null);
    });
  }

};

/* istanbul ignore next */
cov_ttllo176d.s[13]++;
LoginService = tslib_1.__decorate([core_1.Injectable({
  providedIn: 'root'
}), tslib_1.__metadata("design:paramtypes", [account_service_1.AccountService, auth_jwt_service_1.AuthServerProvider])], LoginService);

/* istanbul ignore next */
cov_ttllo176d.s[14]++;
exports.LoginService = LoginService;